<?php

/**
 * @file
 * Integrates the DPS PxPay gateway with Drupal Commerce.
 */

define('COMMERCE_DPS_PXPAY_USERID', 'Sample User');
define('COMMERCE_DPS_PXPAY_KEY', 'Sample Key');
define('COMMERCE_DPS_PXPAY_SERVER', 'https://sec.paymentexpress.com/pxpay/pxaccess.aspx');
define('COMMERCE_DPS_PXPAY_CURRENCY', 'NZD');
define('COMMERCE_DPS_PXPAY_CANCEL_RETURN_URL', 'cart');
define('COMMERCE_DPS_PXPAY_REFPREFIX', 'Website Order');

 /**
 * Implements hook_menu().
 */
function commerce_dps_pxpay_menu() {
  // Define an always-accessible path to receive FPRN (Fail-proof
  // Result Notification).
  $items['checkout/%commerce_order/dps_pxpay_fprn'] = array(
    'page callback' => 'commerce_dps_pxpay_process_fprn',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_dps_pxpay_commerce_payment_method_info() {
  return array(
    'commerce_dps_pxpay' => array(
      'title' => t('Commerce Payment Express (PxPay)'),
      'short_title' => t('DPS'),
      'display_title' => t('Credit card'),
      'description' => t('Provides integration with the DPS PxPay payment gateway.'),
      'terminal' => FALSE,
      'offsite' => TRUE,
      'active' => TRUE,
    ),
  );
}

/**
 * Implements hook_redirect_form().
 */
function commerce_dps_pxpay_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return error if DPS payment gateway userid and key unconfigured.
  if (empty($payment_method['settings']['commerce_dps_pxpay_userid']) ||
    empty($payment_method['settings']['commerce_dps_pxpay_key'])
  ) {
    drupal_set_message(t('The DPS payment gateway cannot be used at this time'), 'error');
    return array();
  }

  $settings = array(
    // Return to the previous page when payment is canceled.
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    // Return to the payment redirect page for processing successful payments.
    'return' => url('checkout/' . $order->order_id . '/dps_pxpay_fprn/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    // Specify the current payment method instance ID in the notify_url.
    'payment_method' => $payment_method['instance_id'],
  );

  return commerce_dps_pxpay_order_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

/**
 * Payment method callback: settings form.
 */
function commerce_dps_pxpay_settings_form($settings = NULL) {
  module_load_include('inc', 'commerce_dps_pxpay', 'commerce_dps');
  module_load_include('inc', 'commerce_dps_pxpay', 'commerce_dps_pxpay');
  $form = array();

  $settings = (array) $settings + array(
    'commerce_dps_pxpay_userid' => COMMERCE_DPS_PXPAY_USERID,
    'commerce_dps_pxpay_key' => COMMERCE_DPS_PXPAY_KEY,
    'commerce_dps_pxpay_server' => COMMERCE_DPS_PXPAY_SERVER,
    'commerce_dps_pxpay_currency' => COMMERCE_DPS_PXPAY_CURRENCY,
    'commerce_dps_pxpay_cancel_return_url' => COMMERCE_DPS_PXPAY_CANCEL_RETURN_URL,
    'commerce_dps_pxpay_refprefix' => COMMERCE_DPS_PXPAY_REFPREFIX,
    'commerce_dps_pxpay_log_transactions' => 0,
  );

  $form['commerce_dps_pxpay_userid'] = array(
    '#type' => 'textfield',
    '#title' => t('PxPay User Id'),
    '#description' => t('PxPay User Id that was issued by Payment Express.'),
    '#default_value' => $settings['commerce_dps_pxpay_userid'],
    '#required' => TRUE,
  );

  $form['commerce_dps_pxpay_key'] = array(
    '#type' => 'textfield',
    '#title' => t('PxPay key'),
    '#description' => t('PxPay Key that was issued by Payment Express.'),
    '#default_value' => $settings['commerce_dps_pxpay_key'],
    '#required' => TRUE,
  );

  $form['commerce_dps_pxpay_server'] = array(
    '#type' => 'value',
    '#title' => t('PxPay server'),
    '#value' => $settings['commerce_dps_pxpay_server'],
  );

  $form['commerce_dps_pxpay_log_transactions'] = array(
    '#type' => 'select',
    '#title' => t('Record transaction information to Drupal logs.'),
    '#description' => t('Record communication with DPS server to Drupal logs. For development only.'),
    '#options' => array(
      0 => ('Disabled (production)'),
      1 => ('Enabled (development)'),
    ),
    '#default_value' => $settings['commerce_dps_pxpay_log_transactions'],
    '#required' => TRUE,
  );

  $form['commerce_dps_pxpay_currency'] = array(
    '#type' => 'select',
    '#title' => t('Currency code'),
    '#description' => t('Transactions can only be processed in one of the listed currencies.'),
    '#options' => commerce_dps_currencies(),
    '#default_value' => $settings['commerce_dps_pxpay_currency'],
  );

  $form['commerce_dps_pxpay_cancel_return_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Cancel return URL'),
    '#description' => t('Specify the path customers who cancel their DPS PxPay payment will be directed to when they return to your site.'),
    '#default_value' => $settings['commerce_dps_pxpay_cancel_return_url'],
    '#size' => 32,
    '#field_prefix' => url(NULL, array('absolute' => TRUE)) . (variable_get('clean_url', 0) ? '' : '?q='),
  );

  $form['commerce_dps_pxpay_refprefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Reference Prefix'),
    '#description' => t('Added before order number sent to DPS, ie Website Order #1234'),
    '#default_value' => $settings['commerce_dps_pxpay_refprefix'],
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_dps_pxpay_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form['commerce_dps_pxpay_logo'] = array(
    '#markup' => l(
      theme_image(array(
          'path' => drupal_get_path('module', 'commerce_dps_pxpay') . '/images/dps_paymentexpress_small.png',
          'alt' => t('DPS - Payment Gateway by Payment Express.'),
          'title' => t('DPS - Payment Gateway by Payment Express.'),
          'attributes' => array('style' => 'float: left; margin: 1em 1em 1em 1.5em;'),
        )),
      'http://www.paymentexpress.com',
      array('html' => TRUE, 'attributes' => array('target' => '_blank'))
    ),
  );

  return $form;
}

/**
 * Called from commerce_dps_pxpay_redirect_form().
 */
function commerce_dps_pxpay_order_form($form, &$form_state, $order, $settings) {
  module_load_include('inc', 'commerce_dps_pxpay', 'commerce_dps');
  module_load_include('inc', 'commerce_dps_pxpay', 'commerce_dps_pxpay');

  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $amount = $wrapper->commerce_order_total->amount->value();
  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  $amount = commerce_currency_amount_to_decimal($amount, $currency_code);

  $transaction = array(
    'user_id' => $settings['commerce_dps_pxpay_userid'],
    'server' => $settings['commerce_dps_pxpay_server'],
    'key' => $settings['commerce_dps_pxpay_key'],
    'amount' => $amount,
    'type' => 'Purchase',
    'txn_id' => substr(uniqid($order->order_number . '-'), 0, 16),
    'reference' => $settings['commerce_dps_pxpay_refprefix'] . " #" . $order->order_number,
    'currency' => $settings['commerce_dps_pxpay_currency'],
    'url_success' => $settings['return'],
    'url_failure' => $settings['return'],
    'email' => $order->mail,
    'log' => $settings['commerce_dps_pxpay_log_transactions'],
  );

  if ($url = commerce_dps_pxpay_generate_request($transaction)) {
    drupal_goto($url);
  }
  else {
    watchdog('commerce_dps_pxpay', 'Unable to generate DPS request with settings: @settings', array('@settings' => print_r($settings, 1)), WATCHDOG_DEBUG);
  }
}

/**
 * Processes an normal payment or FPRN.
 *
 * @return void
 */
function commerce_dps_pxpay_process_fprn($order) {
  // Exclude "PXL1" (DPS FPRN) from creating user accounts.
/*
  $user_email_verification = variable_get('user_email_verification');
  watchdog('commerce_dps_pxpay', $_SERVER['HTTP_USER_AGENT']);
  if (isset($_SERVER['HTTP_USER_AGENT']) && $_SERVER['HTTP_USER_AGENT'] == 'PXL1') {
    if ($user_email_verification) {
      variable_set('user_email_verification', TRUE);
    }
  }
*/
  module_load_include('inc', 'commerce_dps_pxpay', 'commerce_dps');
  module_load_include('inc', 'commerce_dps_pxpay', 'commerce_dps_pxpay');

  if(!$order) {
    return drupal_not_found();
  }

  $payment_method = $order->data['payment_method'];
  $payment_data = commerce_payment_method_instance_load($payment_method);

  $transaction = array(
    'server' => COMMERCE_DPS_PXPAY_SERVER,
    'user_id' => $payment_data['settings']['commerce_dps_pxpay_userid'],
    'key' => $payment_data['settings']['commerce_dps_pxpay_key'],
    'log' => $payment_data['settings']['commerce_dps_pxpay_log_transactions'],
  );

  // Make sure result is set from DPS
  if (isset($_GET['result'])) {
    $transaction['result'] = $_GET['result'];
  }
  else {
    watchdog('commerce_dps_pxpay', 'Transaction result data not found.', array(), WATCHDOG_ERROR);
    if (preg_match('/(\?|\&)result=/', $_SERVER['REQUEST_URI'])) {

      watchdog(
        'commerce_dps_pxpay',
        'Please see !link for how to configure your webserver to accept DPS return requests.',
        array('!link' => l('drupal.org #1799294', 'https://drupal.org/node/1799294')),
        WATCHDOG_WARNING
      );

      drupal_set_message('Server configuration prevented DPS transaction completion. Please advise site administrator to check Drupal logs for details.', 'error');
    }
    drupal_goto($payment_data['settings']['commerce_dps_pxpay_cancel_return_url']);
  }

  // Get DPS payment information
  $response = commerce_dps_pxpay_process_response($transaction);
  // Proccess the order payment. This calls drupal_goto() so will die.
  commerce_dps_pxpay_fprn_process($order, $response, $payment_data['settings']);
}

/**
 * Payment method callback: process an payment once it's been validated.
 *
 * @param  object $order    The order object being processed
 * @param  array  $payment  Payment details from DPS
 * @param  string $settings User defined settings
 *
 * @return void
 */
function commerce_dps_pxpay_fprn_process($order, &$payment, $settings) {
  // Do not perform any processing on transactions here that do not have a transaction ID.
  if (empty($payment['TxnId'])) {
    drupal_goto($settings['commerce_dps_pxpay_cancel_return_url']);
  }

  // Exit when we don't get a payment status we recognize.
  if (!$payment['Success']) {
    // Only add the transaction if we do not have the TxnId stored.
    $remote_ids = commerce_dps_pxpay_get_remote_ids($order->order_id);
    if (!in_array($payment['TxnId'], $remote_ids)) {
      // Write transaction information if payment failed.
      commerce_dps_pxpay_order_transaction($order, $payment, COMMERCE_PAYMENT_STATUS_FAILURE);
      watchdog('commerce_dps_pxpay', 'DPS PxPay transaction failed validation. Cart order ID: @cart_order', array('@cart_order' => $order->order->order_number), WATCHDOG_NOTICE);
      drupal_set_message(t('The transaction failed validation. Please contact us for assistance. Reference Order Id: @orderid', array('@orderid' => $order->order_number)));
    }
    drupal_goto($settings['commerce_dps_pxpay_cancel_return_url']);
  }

  // Local validation.
  $merchant_reference = $settings['commerce_dps_pxpay_refprefix'] . " #" . $order->order_number;

  $payment_mail = $payment['EmailAddress'];

  if ($merchant_reference != $payment['MerchantReference'] || $order->mail != $payment_mail) {
    watchdog('commerce_dps_pxpay', 'DPS PxPay details do not match order details! Cart order ID: @cart_order', array('@cart_order' => $order->order_number), WATCHDOG_NOTICE);
    drupal_set_message(
      t('The details of your DPS PxPay payment do not match your order. Please contact us for assistance. Reference Order Id: @orderid', array('@orderid' => $order->order_number))
    );
    // Write transaction information if payment details do not match order.
    commerce_dps_pxpay_order_transaction($order, $payment, COMMERCE_PAYMENT_STATUS_FAILURE);
    drupal_goto($settings['commerce_dps_pxpay_cancel_return_url']);
  }

  $remote_ids = commerce_dps_pxpay_get_remote_ids($order->order_id);

  // Only add the transaction if we do not have the TxnId stored.
  if (!in_array($payment['TxnId'], $remote_ids)) {
    watchdog('commerce_dps_pxpay', 'DPS PxPay transaction succeeded. Cart order ID: @cart_order', array('@cart_order' => $order->order_number), WATCHDOG_NOTICE);
    drupal_set_message(t('Transaction succeeded. Reference Order Id: @orderid', array('@orderid' => $order->order_number)));
    // Write transaction information when payment was successful.
    commerce_dps_pxpay_order_transaction($order, $payment, COMMERCE_PAYMENT_STATUS_SUCCESS);
  }
  // Save to completed orders in session so it's viewable. Here to let
  // user view order after FPRN has occurred.
  commerce_cart_order_session_save($order->order_id, TRUE);
  commerce_payment_redirect_pane_next_page($order);
  drupal_goto(commerce_checkout_order_uri($order));
}
